name: Deploy website
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
        # Se va a cachear las dependencias para poder usarlas en otros jobs y en siguientes workflows
        # salvo que las dependencias cambien y deben reinstalarse.
        # Se añade cache con un nuevo step justo antes del step que se quiere cachear
        # https://github.com/actions/cache
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    # Necesario crear la key outputs para definir los job outputs del job (no del step)
    # En el ejemplo, el identificador script-file lo elegimos nosotros y es el que usaremos
    # para poder acceder en otro job a ese valor.
    # El publish es el id
    # El script-filex es el del run
    outputs:
      script-file: ${{ steps.publish.outputs.script-filex }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      # Job output: valores que se usan en otros jobs
      # En este ejemplo vamos a obtener el nombre del fichero .js generado
      # El par clave-valor se escribe en un fichero cuyo path está almacenado en la variable GITHUB_OUTPUT
      - name: Publish JS filename
        # Importante este id porque lo cogeremos en la key outputs
        id: publish
        run: find dist/assets/*.js -type f -execdir echo 'script-filex={}' >> $GITHUB_OUTPUT ';'
        # Forma antigua que no se va a soportar en el futuro
        # run: find dist/assets/*.js -type f -execdir echo '::set-output name=script-filex::={}' ';'
      # Queremos descargar los ficheros obtenidos por el comando build. En el workflow,
      # cuando este termina, esos ficheros se pierden.
      # Los queremos para inspeccionarlos, para testearlos localmente o hacer el upload a un
      # proveedor web.
      # Estos ficheros son los artifact jobs.
      # Hay que añadir este step
      # https://github.com/actions/upload-artifact
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          # nombre del artifact necesario para recuperarlo, especialmente en los siguientes jobs
          name: dist-files
          # donde se almacenan los ficheros
          # package.json es redundante. Solo para ver como se trabaja con más de un path
          # path: |
          #  dist
          #  package.json
          path: dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    # Aquí también podríamos querer usar los ficheros obtenidos en el build
    # Esto es un segundo paso, cuando accedemos a esos ficheros ya descargados en local.
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        # Hay que indicar el identificador de artifact
        # Con esto obtendrá el fichero zip producido por el step Upload artifacts del job build,
        # lo descargará y lo descomprimirá
        with:
          name: dist-files
        # Solo para ver que tenemos los ficheros
      - name: Output contents
        run: ls
        # Accediendo al job output
      - name: Output filename
        # Se indica needs.build porque este job tiene needs: build
        # output es necesario indicarlo
        # script-file es el identificador del job output indicado en el job build
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying..."
